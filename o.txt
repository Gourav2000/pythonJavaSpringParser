#######################
controllers
#######################
*******************************************
TransactionController------------------------------------------------------------->
*******************************************
public class TransactionController {

	private ITransactionService transactionService;
	private IUserService userService;
	private IWealthService wealthService;

	@Autowired
	public TransactionController(ITransactionService transactionService, IUserService userService, IWealthService wealthService) {
		this.transactionService = transactionService;
		this.userService = userService;
		this.wealthService = wealthService;
	}

	@PostMapping("/create")
	public CreateTransactionResponse createTransaction(@RequestBody CreateTransactionRequest request) {

		if (request.getUsername() == null || request.getUsername().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDUSERNAME);
		} else if (request.getCurrency() == null || request.getCurrency().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDCURRENCY);
		} else if (request.getAmount() == null || request.getAmount().signum() == 0 || request.getAmount().signum() == -1) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDAMOUNT);
		} else if (request.getCurrency().equals(Constants.MAIN_CURRENCY)) {
			throw new BadRequestException(Constants.MESSAGE_EXCHANGESWITHMAINCURRENCY);
		}

		User user = userService.findByUserName(request.getUsername());

		int last24HoursOperationCount = transactionService.getOperationCountFromLast24Hours(user.getId());
		if (last24HoursOperationCount >= 10) {
			throw new DailyOperationLimitReachedException();
		}

		wealthService.makeWealthExchange(user.getId(), request.getCurrency(), request.getAmount(), request.isBuying());
		Transaction transaction = transactionService.createNewTransaction(user.getId(), request.isBuying(), request.getCurrency(), request.getAmount());

		CreateTransactionResponse response = new CreateTransactionResponse();
		response.setTransaction(transaction);
		return response;
	}

	@PostMapping("/find/all")
	public FindAllTransactionsByUserResponse findAll(@RequestBody FindAllTransactionsByUserRequest request) {

		if (request.getUsername() == null || request.getUsername().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDUSERNAME);
		}

		User user = userService.findByUserName(request.getUsername());
		List<Transaction> transactionList = transactionService.findAllByUserId(user.getId());

		FindAllTransactionsByUserResponse response = new FindAllTransactionsByUserResponse();
		response.setTransactionList(transactionList);
		return response;
	}

}

________________________________________________________________________
*******************************************
TransferController------------------------------------------------------------->
*******************************************
public class TransferController {

	private IUserService userService;
	private IWealthService wealthService;
	private ITransferService transferService;

	@Autowired
	public TransferController(IUserService userService, IWealthService wealthService, ITransferService transferService) {
		this.userService = userService;
		this.wealthService = wealthService;
		this.transferService = transferService;
	}

	@PostMapping("/create")
	public CreateTransferResponse createTransfer(@RequestBody CreateTransferRequest request) {

		if (request.getCurrency() == null || request.getCurrency().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDCURRENCY);
		}

		if (request.getSenderUsername() == null || request.getSenderUsername().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDUSERNAME);
		}

		if (request.getReceiverTcno() == null || request.getReceiverTcno().equals("") || request.getReceiverTcno().length() != 11) {
			throw new BadRequestException();
		}

		if (request.getAmount() == null || request.getAmount().signum() == 0 || request.getAmount().signum() == -1) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDAMOUNT);
		}

		Map<String, Double> currencyRates = wealthService.getCurrencyRates();

		BigDecimal singleTransferLimit = new BigDecimal(20000);
		BigDecimal tryEquivalent = getTryEquivalent(currencyRates, request.getCurrency(), request.getAmount());
		if (tryEquivalent.compareTo(singleTransferLimit) == 1) {
			throw new TransactionLimitException(Constants.MESSAGE_EXCEEDEDMAXVALUE);
		}

		User senderUser = userService.findByUserName(request.getSenderUsername());

		List<Transfer> last24HourTransfers = transferService.findAllTransfersFrom24Hours(senderUser.getId());
		checkDailyTransferLimitExceedition(currencyRates, last24HourTransfers, tryEquivalent);

		User receiverUser = userService.findByTcno(request.getReceiverTcno());

		if (senderUser.equals(receiverUser)) {
			throw new BadRequestException(Constants.MESSAGE_SAMEUSERTRANSACTION);
		}

		wealthService.makeWealthTransaction(senderUser.getId(), request.getCurrency(), request.getAmount(), false);
		wealthService.makeWealthTransaction(receiverUser.getId(), request.getCurrency(), request.getAmount(), true);

		Transfer transfer = transferService.createNewTransfer(new Transfer(senderUser.getId(), receiverUser.getId(), request.getCurrency(), request.getAmount()));
		
		CreateTransferResponse response = new CreateTransferResponse();
		response.setTransfer(transfer);
		return response;
	}

	private BigDecimal getTryEquivalent(Map<String, Double> currencyRates, String currency, BigDecimal amount) {
		BigDecimal transferCurrRate = BigDecimal.valueOf(currencyRates.get(currency));
		return amount.divide(transferCurrRate, 9, RoundingMode.HALF_UP);
	}

	private void checkDailyTransferLimitExceedition(Map<String, Double> currencyRates, List<Transfer> last24HourTransfers, BigDecimal transferTryEquivalent) {
		BigDecimal dailyTransferLimit = new BigDecimal(100000);

		BigDecimal rate;
		BigDecimal tryEquivalent;
		for (Transfer transfer : last24HourTransfers) {
			rate = BigDecimal.valueOf(currencyRates.get(transfer.getCurrency()));
			tryEquivalent = transfer.getAmount().divide(rate, 9, RoundingMode.HALF_UP);

			transferTryEquivalent = transferTryEquivalent.add(tryEquivalent);
			if (transferTryEquivalent.compareTo(dailyTransferLimit) == 1) {
				throw new TransactionLimitException(Constants.MESSAGE_EXCEEDEDMAXVALUEFORDAY);
			}
		}

	}

}
________________________________________________________________________
*******************************************
UserController------------------------------------------------------------->
*******************************************
public class UserController {

	private IUserService userService;
	private IWealthService wealthService;

	@Autowired
	public UserController(IUserService userService, IWealthService wealthService) {
		this.userService = userService;
		this.wealthService = wealthService;
	}

	@GetMapping("/find/all")
	public FindAllUsersResponse findAll() {
		List<User> userList = userService.findAll();
		
		FindAllUsersResponse response = new FindAllUsersResponse();
		response.setUserList(userList);
		return response;
	}

	@PostMapping("/create")
	public CreateUserResponse createUser(@RequestBody CreateUserRequest request) {

		if (request.getUsername() == null || request.getUsername().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDUSERNAME);
		}
		
		if (request.getPassword() == null || request.getPassword().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDPASSWORD);
		}

		if (request.getTcno() == null || request.getTcno().length() != 11 || !Pattern.matches("[0-9]+", request.getTcno())) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDTCNO);
		}

		boolean isUsernameExist = userService.isUsernameExist(request.getUsername());
		if (isUsernameExist) {
			throw new BadCredentialsException(Constants.MESSAGE_SAMEUSERNAMEEXIST);
		}

		boolean isTcnoExist = userService.isTcnoExist(request.getTcno());
		if (isTcnoExist) {
			throw new BadCredentialsException(Constants.MESSAGE_SAMETCNOEXIST);
		}

		User user = userService.createNewUser(new User(request.getUsername(), request.getPassword(), request.getTcno()));
		wealthService.newWealthRecord(user.getId());

		CreateUserResponse response = new CreateUserResponse();
		response.setUsername(user.getUsername());
		response.setTcno(user.getTcno());
		return response;
	}

}

________________________________________________________________________
*******************************************
WealthController------------------------------------------------------------->
*******************************************
public class WealthController {

	private IWealthService wealthService;
	private IUserService userService;

	@Autowired
	public WealthController(IWealthService wealthService, IUserService userService) {
		this.wealthService = wealthService;
		this.userService = userService;
	}

	@PostMapping("/retrieve")
	public RetrieveWealthResponse retrieveWealth(@RequestBody RetrieveWealthRequest request) {

		if (request.getUsername() == null || request.getUsername().equals("")) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDUSERNAME);
		}

		User user = userService.findByUserName(request.getUsername());
		Wealth wealth = wealthService.findWealth(user.getId());

		RetrieveWealthResponse response = new RetrieveWealthResponse();
		response.setWealth(wealth);
		return response;
	}

}

________________________________________________________________________
#######################
entities
#######################
*******************************************
Transaction------------------------------------------------------------->
*******************************************
public class Transaction {

	private @Id @GeneratedValue Long id;
	private Long userId;
	private boolean isBought;
	private String currency;
	private BigDecimal amount;
	private Date transactionTime;

	private Transaction() {
	}

	public Transaction(Long userId, boolean isBought, String currency, BigDecimal amount) {
		this.userId = userId;
		this.isBought = isBought;
		this.currency = currency;
		this.amount = amount;
		this.transactionTime = new Date();
	}

}

________________________________________________________________________
*******************************************
Transfer------------------------------------------------------------->
*******************************************
public class Transfer {

	private @Id @GeneratedValue Long id;
	private Long fromUserId;
	private Long toUserId;
	private String currency;
	private BigDecimal amount;
	private Date transferTime;

	private Transfer() {
	}

	public Transfer(Long fromUserId, Long toUserId, String currency, BigDecimal amount) {
		this.fromUserId = fromUserId;
		this.toUserId = toUserId;
		this.currency = currency;
		this.amount = amount;
		this.transferTime = new Date();
	}
}

________________________________________________________________________
*******************************************
User------------------------------------------------------------->
*******************************************
public class User {

	private @Id @GeneratedValue Long id;
	private String username;
	private String password;
	private String tcno;

	private User() {
	}

	public User(String username, String password, String tcno) {
		this.username = username;
		this.password = password;
		this.tcno = tcno;
	}
}

________________________________________________________________________
*******************************************
Wealth------------------------------------------------------------->
*******************************************
public class Wealth {

	private @Id @GeneratedValue Long userId;

	@ElementCollection
	private Map<String, BigDecimal> wealthMap;

	private Wealth() {
	}

	public Wealth(Long userId, Map<String, BigDecimal> wealthMap) {
		this.userId = userId;
		this.wealthMap = wealthMap;
	}

}

________________________________________________________________________
#######################
repositories
#######################
*******************************************
TransactionRepository------------------------------------------------------------->
*******************************************
public interface TransactionRepository extends JpaRepository<Transaction, Long> {

	@Query(value = "SELECT COUNT(*) FROM Transaction WHERE userId = :userId and transactionTime >= DATEADD(day, -1, GETDATE())")
	int getOperationCountFromLast24Hours(@Param("userId") Long userId);
	
	List<Transaction> findAllByUserId(Long userId);

}

________________________________________________________________________
*******************************************
TransferRepository------------------------------------------------------------->
*******************************************
public interface TransferRepository extends JpaRepository<Transfer, Long> {

	@Query(value = "SELECT t FROM Transfer t WHERE t.fromUserId = :userId and t.transferTime >= DATEADD(day, -1, GETDATE())")
	List<Transfer> findAllTransfersFrom24Hours(@Param("userId") Long userId);

}

________________________________________________________________________
*******************************************
UserRepository------------------------------------------------------------->
*******************************************
public interface UserRepository extends JpaRepository<User, Long> {
	
	User findByUsername(String username);
	
	User findByTcno(String tcno);

}

________________________________________________________________________
*******************************************
WealthRepository------------------------------------------------------------->
*******************************************
public interface WealthRepository extends JpaRepository<Wealth, Long> {

}

________________________________________________________________________
#######################
services
#######################
*******************************************
TransactionService------------------------------------------------------------->
*******************************************
public class TransactionService implements ITransactionService {

	private TransactionRepository repository;

	@Autowired
	public TransactionService(TransactionRepository repository) {
		this.repository = repository;
	}

	@Override
	public Transaction createNewTransaction(Long userId, boolean isBuying, String currency, BigDecimal amount) {
		Transaction transaction = new Transaction(userId, isBuying, currency, amount);
		return repository.save(transaction);
	}

	@Override
	public int getOperationCountFromLast24Hours(Long userId) {
		return repository.getOperationCountFromLast24Hours(userId);
	}

	@Override
	public List<Transaction> findAllByUserId(Long userId) {
		return repository.findAllByUserId(userId);
	}

}

________________________________________________________________________
*******************************************
TransferService------------------------------------------------------------->
*******************************************
public class TransferService implements ITransferService {

	private TransferRepository repository;

	@Autowired
	public TransferService(TransferRepository repository) {
		this.repository = repository;
	}

	@Override
	public Transfer createNewTransfer(Transfer transfer) {
		return repository.save(transfer);
	}

	@Override
	public List<Transfer> findAllTransfersFrom24Hours(Long userId) {
		return repository.findAllTransfersFrom24Hours(userId);
	}

}

________________________________________________________________________
*******************************************
UserService------------------------------------------------------------->
*******************************************
public class UserService implements IUserService, UserDetailsService {

	private UserRepository repository;
	private PasswordEncoder passwordEncoder;

	@Autowired
	public UserService(UserRepository repository, PasswordEncoder passwordEncoder) {
		this.repository = repository;
		this.passwordEncoder = passwordEncoder;
	}

	@Override
	public List<User> findAll() {
		return repository.findAll();
	}

	@Override
	public User createNewUser(User user) {
		user.setPassword(passwordEncoder.encode(user.getPassword()));
		return repository.save(user);
	}

	@Override
	public User findByUserName(String username) {
		User user = repository.findByUsername(username);

		if (user == null)
			throw new UserNotFoundException(username);
		else
			return user;
	}

	@Override
	public User findByTcno(String tcno) {
		User user = repository.findByTcno(tcno);

		if (user == null)
			throw new UserNotFoundException("with TC No: " + tcno);
		else
			return user;
	}

	@Override
	public UserDetails loadUserByUsername(String username) {
		User user = repository.findByUsername(username);

		if (user == null) {
			throw new UsernameNotFoundException(username);
		}

		return new org.springframework.security.core.userdetails.User(user.getUsername(), user.getPassword(), emptyList());
	}

	@Override
	public boolean isUsernameExist(String username) {
		User user = repository.findByUsername(username);
		return user != null;
	}
	
	@Override
	public boolean isTcnoExist(String tcno) {
		User user = repository.findByTcno(tcno);
		return user != null;
	}

}

________________________________________________________________________
*******************************************
WealthService------------------------------------------------------------->
*******************************************
public class WealthService implements IWealthService {

	private WealthRepository repository;

	@Autowired
	public WealthService(WealthRepository repository) {
		this.repository = repository;
	}

	@Override
	public void newWealthRecord(Long userId) {

		Map<String, BigDecimal> wealthMap = new HashMap<>();

		Map<String, Double> currencyMap = getCurrencyRates();
		for (Map.Entry<String, Double> entry : currencyMap.entrySet()) {
			wealthMap.put(entry.getKey(), BigDecimal.ZERO);
		}

		addInitialBalance(wealthMap);

		Wealth userWealth = new Wealth(userId, wealthMap);
		repository.save(userWealth);
	}

	@Override
	public void makeWealthExchange(Long userId, String currency, BigDecimal amount, boolean isBuying) {

		Wealth userWealth = repository.findById(userId).orElseThrow(() -> new UserNotFoundException());
		Map<String, BigDecimal> wealthMap = userWealth.getWealthMap();

		if (!wealthMap.containsKey(currency)) {
			throw new BadRequestException("Invalid currency.");
		}

		BigDecimal rate = BigDecimal.valueOf(getCurrencyRates().get(currency));
		BigDecimal tryEquivalent = amount.divide(rate, 9, RoundingMode.HALF_UP);

		if (isBuying) {
			if (tryEquivalent.compareTo(wealthMap.get(Constants.MAIN_CURRENCY)) == 1) { // Trying to buy more than he can.
				throw new InsufficientFundsException();
			}
		} else {
			if (amount.compareTo(wealthMap.get(currency)) == 1) { // Trying to sell more than he has.
				throw new InsufficientFundsException(currency);
			}
		}

		if (isBuying) {
			wealthMap.put(Constants.MAIN_CURRENCY, wealthMap.get(Constants.MAIN_CURRENCY).subtract(tryEquivalent));
			wealthMap.put(currency, wealthMap.get(currency).add(amount));
		} else {
			wealthMap.put(currency, wealthMap.get(currency).subtract(amount));
			wealthMap.put(Constants.MAIN_CURRENCY, wealthMap.get(Constants.MAIN_CURRENCY).add(tryEquivalent));
		}

		userWealth.setWealthMap(wealthMap);
		repository.save(userWealth);
	}

	@Override
	public void makeWealthTransaction(Long userId, String currency, BigDecimal amount, boolean isIncrementing) {

		Wealth userWealth = repository.findById(userId).orElseThrow(() -> new UserNotFoundException());
		Map<String, BigDecimal> wealthMap = userWealth.getWealthMap();

		if (!wealthMap.containsKey(currency)) {
			throw new BadRequestException(Constants.MESSAGE_INVALIDCURRENCY);
		}

		if (!isIncrementing) {
			if (amount.compareTo(wealthMap.get(currency)) == 1) {
				throw new InsufficientFundsException(currency);
			}

			wealthMap.put(currency, wealthMap.get(currency).subtract(amount));
		} else {
			wealthMap.put(currency, wealthMap.get(currency).add(amount));
		}

		userWealth.setWealthMap(wealthMap);
		repository.save(userWealth);
	}

	@Override
	public Wealth findWealth(Long userId) {
		return repository.findById(userId).orElseThrow(() -> new UserNotFoundException());
	}

	@Override
	public Map<String, Double> getCurrencyRates() {
		final String uri = "https://api.exchangeratesapi.io/latest?base=TRY";

		RestTemplate restTemplate = new RestTemplate();
		return ((Map<String, Map<String, Double>>) restTemplate.getForObject(uri, Map.class)).get("rates");
	}

	private void addInitialBalance(Map<String, BigDecimal> wealthMap) {
		String currency = Constants.MAIN_CURRENCY;

		BigDecimal currentAmount = wealthMap.get(currency);
		BigDecimal amountToAdd = new BigDecimal(130000);
		BigDecimal finalAmount = currentAmount.add(amountToAdd);

		wealthMap.put(currency, finalAmount);
	}

}

________________________________________________________________________
